2.  import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X, y = load_breast_cancer(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
X_train = (X_train - X_train.mean(0)) / (X_train.std(0) + 1e-8)
X_test = (X_test - X_test.mean(0)) / (X_test.std(0) + 1e-8)

class LR:
    def init(self, lr=0.01, iters=5000): self.lr, self.iters = lr, iters
    def sigmoid(self, z): return 1 / (1 + np.exp(-z))
    def fit(self, X, y):
        self.w, self.b = np.zeros(X.shape[1]), 0
        for i in range(1, self.iters + 1):
            z = X @ self.w + self.b
            h = self.sigmoid(z)
            if i % 100 == 1 or i == self.iters:
                cost = -np.mean(y * np.log(h + 1e-8) + (1 - y) * np.log(1 - h + 1e-8))
                print(f"Iteration {i}/{self.iters}, cost = {cost:.4f}")
            self.w -= self.lr * X.T @ (h - y) / len(y)
            self.b -= self.lr * np.sum(h - y) / len(y)
    def predict(self, X): return (self.sigmoid(X @ self.w + self.b) > 0.5).astype(int)

model = LR()
model.fit(X_train, y_train)
pred = model.predict(X_test)
print(f"Model Accuracy on Test Set: {accuracy_score(y_test, pred)}")
